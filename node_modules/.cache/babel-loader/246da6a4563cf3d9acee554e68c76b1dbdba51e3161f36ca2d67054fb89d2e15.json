{"ast":null,"code":"import { db } from '../firebaseConfig';\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\nconst BLOG_POSTS_COLLECTION = 'blogPosts';\n\n// إضافة تدوينة علمية جديدة\nexport const addBlogPost = async postData => {\n  try {\n    const docRef = await addDoc(collection(db, BLOG_POSTS_COLLECTION), {\n      ...postData,\n      createdAt: new Date().toISOString()\n    });\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    console.error('خطأ في إضافة التدوينة:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// جلب جميع التدوينات العلمية\nexport const getAllBlogPosts = async () => {\n  try {\n    const q = query(collection(db, BLOG_POSTS_COLLECTION), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const posts = [];\n    querySnapshot.forEach(doc => {\n      posts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return {\n      success: true,\n      data: posts\n    };\n  } catch (error) {\n    console.error('خطأ في جلب التدوينات:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// جلب التدوينات حسب العلامات (Tags)\nexport const getBlogPostsByTag = async tag => {\n  try {\n    const q = query(collection(db, BLOG_POSTS_COLLECTION), where('tags', 'array-contains', tag), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const posts = [];\n    querySnapshot.forEach(doc => {\n      posts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return {\n      success: true,\n      data: posts\n    };\n  } catch (error) {\n    console.error('خطأ في جلب التدوينات حسب العلامة:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// تحديث تدوينة علمية\nexport const updateBlogPost = async (postId, updatedData) => {\n  try {\n    const postRef = doc(db, BLOG_POSTS_COLLECTION, postId);\n    await updateDoc(postRef, {\n      ...updatedData,\n      updatedAt: new Date().toISOString()\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('خطأ في تحديث التدوينة:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// حذف تدوينة علمية\nexport const deleteBlogPost = async postId => {\n  try {\n    await deleteDoc(doc(db, BLOG_POSTS_COLLECTION, postId));\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('خطأ في حذف التدوينة:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// البحث في التدوينات\nexport const searchBlogPosts = async searchTerm => {\n  try {\n    // ملاحظة: Firestore لا يدعم البحث النصي المتقدم بشكل مباشر\n    // هذا مثال بسيط للبحث في العناوين\n    const querySnapshot = await getDocs(collection(db, BLOG_POSTS_COLLECTION));\n    const posts = [];\n    querySnapshot.forEach(doc => {\n      const data = doc.data();\n      if (data.title.toLowerCase().includes(searchTerm.toLowerCase()) || data.content.toLowerCase().includes(searchTerm.toLowerCase())) {\n        posts.push({\n          id: doc.id,\n          ...data\n        });\n      }\n    });\n    return {\n      success: true,\n      data: posts\n    };\n  } catch (error) {\n    console.error('خطأ في البحث في التدوينات:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["db","collection","addDoc","getDocs","doc","updateDoc","deleteDoc","query","where","orderBy","BLOG_POSTS_COLLECTION","addBlogPost","postData","docRef","createdAt","Date","toISOString","success","id","error","console","message","getAllBlogPosts","q","querySnapshot","posts","forEach","push","data","getBlogPostsByTag","tag","updateBlogPost","postId","updatedData","postRef","updatedAt","deleteBlogPost","searchBlogPosts","searchTerm","title","toLowerCase","includes","content"],"sources":["/home/ubuntu/arabic-research-service/src/services/blogPostsService.js"],"sourcesContent":["import { db } from '../firebaseConfig';\nimport { \n  collection, \n  addDoc, \n  getDocs, \n  doc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  orderBy \n} from 'firebase/firestore';\n\nconst BLOG_POSTS_COLLECTION = 'blogPosts';\n\n// إضافة تدوينة علمية جديدة\nexport const addBlogPost = async (postData) => {\n  try {\n    const docRef = await addDoc(collection(db, BLOG_POSTS_COLLECTION), {\n      ...postData,\n      createdAt: new Date().toISOString()\n    });\n    return { success: true, id: docRef.id };\n  } catch (error) {\n    console.error('خطأ في إضافة التدوينة:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// جلب جميع التدوينات العلمية\nexport const getAllBlogPosts = async () => {\n  try {\n    const q = query(\n      collection(db, BLOG_POSTS_COLLECTION),\n      orderBy('createdAt', 'desc')\n    );\n    const querySnapshot = await getDocs(q);\n    const posts = [];\n    querySnapshot.forEach((doc) => {\n      posts.push({ id: doc.id, ...doc.data() });\n    });\n    return { success: true, data: posts };\n  } catch (error) {\n    console.error('خطأ في جلب التدوينات:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// جلب التدوينات حسب العلامات (Tags)\nexport const getBlogPostsByTag = async (tag) => {\n  try {\n    const q = query(\n      collection(db, BLOG_POSTS_COLLECTION), \n      where('tags', 'array-contains', tag),\n      orderBy('createdAt', 'desc')\n    );\n    const querySnapshot = await getDocs(q);\n    const posts = [];\n    querySnapshot.forEach((doc) => {\n      posts.push({ id: doc.id, ...doc.data() });\n    });\n    return { success: true, data: posts };\n  } catch (error) {\n    console.error('خطأ في جلب التدوينات حسب العلامة:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// تحديث تدوينة علمية\nexport const updateBlogPost = async (postId, updatedData) => {\n  try {\n    const postRef = doc(db, BLOG_POSTS_COLLECTION, postId);\n    await updateDoc(postRef, {\n      ...updatedData,\n      updatedAt: new Date().toISOString()\n    });\n    return { success: true };\n  } catch (error) {\n    console.error('خطأ في تحديث التدوينة:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// حذف تدوينة علمية\nexport const deleteBlogPost = async (postId) => {\n  try {\n    await deleteDoc(doc(db, BLOG_POSTS_COLLECTION, postId));\n    return { success: true };\n  } catch (error) {\n    console.error('خطأ في حذف التدوينة:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// البحث في التدوينات\nexport const searchBlogPosts = async (searchTerm) => {\n  try {\n    // ملاحظة: Firestore لا يدعم البحث النصي المتقدم بشكل مباشر\n    // هذا مثال بسيط للبحث في العناوين\n    const querySnapshot = await getDocs(collection(db, BLOG_POSTS_COLLECTION));\n    const posts = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      if (data.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          data.content.toLowerCase().includes(searchTerm.toLowerCase())) {\n        posts.push({ id: doc.id, ...data });\n      }\n    });\n    return { success: true, data: posts };\n  } catch (error) {\n    console.error('خطأ في البحث في التدوينات:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}